<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Report">
	
	

	<!-- 페이지에 따른 신고리스트 출력 -->
	<select id="selectReportList" resultType="map">
		select * from (select row_number() over(order by r.report_date desc) num, nvl(rm.nickname,'탈퇴회원') renick, wm.nickname wrnick, r.* ,TO_CHAR(r.report_date,'YYYY-MM-DD') rdate from report r left join member wm on r.writer= wm.email 
		left join member rm  on r.reporter = rm.email where
		<if test="reportFilter1=='게시글'">
			<if test="reportFilter2=='재능마켓'">
				parent_seq like 'c%' and  parent_seq not like 'cr%' 
			</if>
			<if test="reportFilter2=='커뮤니티'">
				(parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%')
			</if>
		</if>
		<if test="reportFilter1=='댓글'">
			parent_seq like 'r%'
		</if>
		<if test="reportFilter1=='리뷰'">
			parent_seq like 'cr%'
		</if>
		<if test="report1_Search !=null">
			<if test="reportFilter3=='제목'">
			 and contents like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='작성자'">
			and writer like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='신고자'">
			and reporter like '%'||#{report1_Search}||'%'
			</if>
		</if>
		<if test="reportResolCheck=='미처리'">
		and state = 1
		</if>
		)where num between #{start} and #{end}
	</select>
	
		<!-- 페이지에 따른 신고리스트 출력 -->
<!-- 	<select id="selectReportList" resultType="kh.spring.DTO.ReportDTO"> -->
<!-- 		select * from (select row_number() over(order by report_seq desc) num, report.* from report where -->
<!-- 		<if test="reportFilter1=='게시글'"> -->
<!-- 			<if test="reportFilter2=='재능마켓'"> -->
<!-- 				parent_seq like 'c%' and  parent_seq not like 'cr%'  -->
<!-- 			</if> -->
<!-- 			<if test="reportFilter2=='커뮤니티'"> -->
<!-- 				(parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%') -->
<!-- 			</if> -->
<!-- 		</if> -->
<!-- 		<if test="reportFilter1=='댓글'"> -->
<!-- 			parent_seq like 'r%' -->
<!-- 		</if> -->
<!-- 		<if test="reportFilter1=='리뷰'"> -->
<!-- 			parent_seq like 'cr%' -->
<!-- 		</if> -->
<!-- 		<if test="report1_Search !=null"> -->
<!-- 			<if test="reportFilter3=='제목'"> -->
<!-- 			 and contents like '%'||#{report1_Search}||'%' -->
<!-- 			</if> -->
<!-- 			<if test="reportFilter3=='작성자'"> -->
<!-- 			and writer like '%'||#{report1_Search}||'%' -->
<!-- 			</if> -->
<!-- 			<if test="reportFilter3=='신고자'"> -->
<!-- 			and reporter like '%'||#{report1_Search}||'%' -->
<!-- 			</if> -->
<!-- 		</if> -->
<!-- 		<if test="reportResolCheck=='미처리'"> -->
<!-- 		and state = 1 -->
<!-- 		</if> -->
<!-- 		)where num between #{start} and #{end} -->
<!-- 	</select> -->
	
	<!--조건에 따른 신고 수 출력 -->
	<select id="reportCoutnByCon" resultType="int">
				select count(*) from report where
		<if test="reportFilter1=='게시글'">
			<if test="reportFilter2=='재능마켓'">
				parent_seq like 'c%' and  parent_seq not like 'cr%'
			</if>
			<if test="reportFilter2=='커뮤니티'">
				(parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%')
			</if>
		</if>
		<if test="reportFilter1=='댓글'">
			parent_seq like 'r%'
		</if>
		<if test="reportFilter1=='리뷰'">
			parent_seq like 'cr%'
		</if>
		<if test="report1_Search!=null">
			<if test="reportFilter3=='제목'">
			 and contents like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='작성자'">
			and writer like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='신고자'">
			and reporter like '%'||#{report1_Search}||'%'
			</if>
		</if>
		<if test='reportResolCheck=="미처리"'>
		and state = 1
		</if>
	</select>
	<!-- 삭제 처리 안된 신고 건수 -->
		<select id="notDeletedReportCount" resultType="int">
				select count(*) from report where
		<if test="reportFilter1=='게시글'">
			<if test="reportFilter2=='재능마켓'">
				parent_seq like 'c%' and  parent_seq not like 'cr%' 
			</if>
			<if test="reportFilter2=='커뮤니티'">
				(parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%')
			</if>
		</if>
		<if test="reportFilter1=='댓글'">
			parent_seq like 'r%'
		</if>
		<if test="reportFilter1=='리뷰'">
			parent_seq like 'cr%'
		</if>
		<if test="report1_Search!=null">
			<if test="reportFilter3=='제목'">
			 and contents like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='작성자'">
			and writer like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='신고자'">
			and reporter like '%'||#{report1_Search}||'%'
			</if>
		</if>
		<if test='reportResolCheck.equals("미처리")'>
		and state = '1'
		</if> and state != '2'
	</select>
	
	<!--댓글, 리뷰의 부모 seq 찾기 -->
	<select id="classSeqByReviewSeq" resultType="String">
		select parent_seq from class_review where review_seq = #{value}
	</select>
	<select id="boardSeqByReplySeq" resultType="String">
		select parent_seq from reply where reply_seq = #{value}
	</select>
	<!-- 신고 반려하기 -->
	<!--1.반려대상 parent_seq뽑기  -->
	<select id="selectParentByseq" resultType="String">
				select parent_seq from report where report_seq=#{value}
	</select>
	<!-- 2.reportTable 반려  -->
	<update id="reportStateToReject">
		update report set state = '0' where report_seq = #{value}
	</update>
	<!-- 3.boardTable 반려  -->
	<update id="boardStateToReject">
		<choose>
			<when test='parent_seq.startsWith("c")'>
				<choose>
					<when test='parent_seq.startsWith("c")'>
						update class set state='0' where class_seq=#{value} 
					</when>
					<otherwise>
						update class_review set state='0' where review_seq=#{value} 
					</otherwise>
				</choose>
			</when>
			<when test='parent_seq.startsWith("r")'>
				update reply set state='0' where reply_seq=#{value} 
			</when>
			<otherwise>
			    update community set state='0' where board_seq=#{value}
			</otherwise>
		</choose>
	</update>
	
	<!-- 신고 선택 삭제하기 -->
	<!-- 1.reportTable 반려  -->
	<update id="reportStateToDelete">
		update report set state = '2' where report_seq = #{value}
	</update>
	<!-- 2.boardTable 삭제  -->
	<update id="boardStateToDelete">
		<choose>
			<when test='parent_seq.startsWith("c")'>
				<choose>
					<when test='parent_seq.startsWith("cr")'>
						
						update class_review set state='2' where review_seq=#{value} 
						
					</when>
					<otherwise>
						update class set state='2' where class_seq=#{value} 
					</otherwise>
				</choose>
			</when>
			<when test='parent_seq.startsWith("r")'>
				update reply set state='2' where reply_seq=#{value} 
			</when>
			<otherwise>
			    update community set state='2' where board_seq=#{value}
			</otherwise>
		</choose>
	</update>

<!--전체 삭제 처리 -->
	<!-- 1. 조건에 맞는 신고의 parent_seq 출력 -->
		<select id="reportParentSeqByCon" resultType="String">
				select parent_seq from report where
		<if test="reportFilter1=='게시글'">
			<if test="reportFilter2=='재능마켓'">
				parent_seq like 'c%' and  parent_seq not like 'cr%' 
			</if>
			<if test="reportFilter2=='커뮤니티'">
				parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%'
			</if>
		</if>
		<if test="reportFilter1=='댓글'">
			parent_seq like 'r%'
		</if>
		<if test="reportFilter1=='리뷰'">
			parent_seq like 'cr%'
		</if>
		<if test="report1_Search!=null">
			<if test="reportFilter3=='제목'">
			 and contents like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='작성자'">
			and writer like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='신고자'">
			and reporter like '%'||#{report1_Search}||'%'
			</if>
		</if>
		<if test="reportResolCheck=='미처리'">
		and state = 1
		</if>
	</select>
<!--2. report table 전체 삭제 처리-->
	<delete id="deleteAllReport">
				update report set state='2' where
		<if test="reportFilter1=='게시글'">
			<if test="reportFilter2=='재능마켓'">
				parent_seq like 'c%' and  parent_seq not like 'cr%' 
			</if>
			<if test="reportFilter2=='커뮤니티'">
				parent_seq like 'q%' or parent_seq like 'h%' or parent_seq like 's%' or parent_seq like 'd%'
			</if>
		</if>
		<if test="reportFilter1=='댓글'">
			parent_seq like 'r%'
		</if>
		<if test="reportFilter1=='리뷰'">
			parent_seq like 'cr%'
		</if>
		<if test="report1_Search!=null">
			<if test="reportFilter3=='제목'">
			 and contents like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='작성자'">
			and writer like '%'||#{report1_Search}||'%'
			</if>
			<if test="reportFilter3=='신고자'">
			and reporter like '%'||#{report1_Search}||'%'
			</if>
		</if>
		<if test="reportResolCheck=='미처리'">
		and state = 1
		</if>
	</delete>
	
	<!-- 블랙리스트 -->
	<!-- 블랙리스트 전체 인원 뽑기 -->
	<select id="totalBlackListCount" resultType="int">
select count(*) from member left join (select writer, count(*) report_count from report
where state !='0' group by writer) r  on member.email=r.writer  where (report_count>=10 or type='B')
			<if test='!target.equals("")'>
				<choose>
					<when test='targetType.equals("성명")'>
						and name like '%'||#{target}||'%'
					</when>
					<when test='targetType.equals("닉네임")'>
						and nickname like '%'||#{target}||'%'
					</when>
					<when test='targetType.equals("이메일")'>
						and email like '%'||#{target}||'%'
					</when>
				</choose>
			</if>
	</select>
<!--조건에 맞는 블랙리스트 멤버 정보 추출-->	
	<select id="selectBlackListByPage" resultType="map">
		select * from (select row_number() over(order by report_count desc nulls last) nums, m.* 
		from (select * from member left join(select writer, count(*) report_count from report
		where state !='0' group by writer) r on member.email=r.writer) m  where (report_count>=10 or type='B')
		
			<if test='!target.equals("")'>
				<choose>
					<when test='targetType.equals("성명")'>
						and name like '%'||#{target}||'%'
					</when>
					<when test='targetType.equals("닉네임")'>
						and nickname like '%'||#{target}||'%'
					</when>
					<when test='targetType.equals("이메일")'>
						and email like '%'||#{target}||'%'
					</when>
				</choose>
			</if>
			)where nums between #{start} and #{end}
		
	</select>
<!-- 블랙리스트 해제하기 -->
	<update id="cancelBlackList">
		update member set type='M' where email = #{value}
	</update>
	
	<!-- 블랙리스트 등록하기 -->
	<update id="regBlackList">
		update member set type='B' where email = #{value}
	</update>

	<!-- 블랙리스트 회원 상세 정보(회원정보,신고수,반려수) -->
	<select id="memberInfoByEmail" resultType="map">
		select * from member left join(select writer as writer1, count(*) report from report where state=2 or state='1' group by writer) r
		on member.email = r.writer1
		left join (select writer as writer2,count(*) reject from report where state=0 group by writer) j 
		on member.email = j.writer2 where email=#{value}
	</select>	
	<!-- 카테고리별 신고수 뽑기 -->
	<select id="reportCountByCategoty" resultType="map">
		select location, count(*) as count from (select * from member left join (select report.*, case 
        when parent_seq like 'cr%' then '리뷰'
        when parent_seq like 'r%' then '댓글'
        else '게시글'end as location from report where state ='2' or state='1') r 
        on member.email=r.writer) where email=#{value} group by location
	</select>
	<!-- 멤버 아이디에 따른 신고 리스트 뽑기(페이징) -->
	<select id="Report.reportByEmail" resultType="kh.spring.DTO.ReportDTO">
		select * from (select row_number() over(order by report_seq) num, report.* from report where writer = #{email})	
		<if test="start!=0">
			where num between #{start} and #{end}
		</if>
		
	</select>
	
	<!-- 신고 하기 -->	
	<insert id="report">
		insert into report values (report_seq.nextval, #{contents}, #{reason}, 
			#{writer}, #{reporter}, sysdate, #{parent_seq},1)
	</insert>
	
	<!-- 해당 parent_seq 정보 지우기 -->
	<delete id="delete">
		delete from report where parent_seq = #{parent_seq}
	</delete>
	
	<!-- 이메일로 신고 삭제 처리 -->
	<!-- 1. 이메일로 신고 대상 List뽑기 -->
	<select id="reportParentSeq" resultType="String">
		select parent_seq from report where writer=#{value}
	</select>
	<!-- report table 삭제 처리 -->
	<update id="deleteAllReportByEmail">
		update report set state = '2' where writer = #{value}
	</update>
	
	
	
	<!-- report테이블에서 해당 게시글에 달린 댓글,대댓글의 신고 기록 삭제 -->
	<delete id="deleteReply">
		delete from report 
		where parent_seq in (
							select reply_seq 
							from reply 
							where board_seq = #{board_seq}
							)
	</delete>
	
	<delete id="deleteRvByCSeq">
		delete from report
		where parent_seq in
			(select review_seq from class_review where parent_seq=#{parent_seq})
	</delete>
	
</mapper>