<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Admin">

	<!-- 1. 메인 페이지 - 첫번째 탭 : 회원정보 불러오기 -->
	<!-- 전체 회원 수 -->
	<select id="selectMemberCount" resultType="int">
		select count(*) from member
		<trim prefix="where">
			<if test="target!=''">
				<if test="targetType=='all'">
					email like '%'||#{target}||'%' or name like '%'||#{target}||'%' or nickname like '%'||#{target}||'%'
				</if>
				<if test="targetType=='email'">
					email like '%'||#{target}||'%'
				</if>
				<if test="targetType=='name'">
					name like '%'||#{target}||'%'
				</if>
				<if test="targetType=='nickname'">
					nickname like '%'||#{target}||'%'
				</if>
			</if>
		</trim>
	</select>
	
	<!--회원정보 -->
	<select id="selectMemberByPage" resultType="kh.spring.DTO.MemberDTO">
		select * from (select row_number() over(order by email desc) num,member.* from member 
		<trim prefix="where">
			<if test="target!=''">
				<if test="targetType=='all'">
					email like '%'||#{target}||'%' or name like '%'||#{target}||'%' or nickname like '%'||#{target}||'%'
				</if>
				<if test="targetType=='email'">
					email like '%'||#{target}||'%'
				</if>
				<if test="targetType=='name'">
					name like '%'||#{target}||'%'
				</if>
				<if test="targetType=='nickname'">
					nickname like '%'||#{target}||'%'
				</if>
			</if>
		</trim>
		) where num between #{start} and #{end}

	</select> 
	<!-- 1. 메인 페이지 - 두번째 탭 : 회원정보 불러오기 -->
	<!--신고수 -->
	<select id="countReportById" resultType="int">
		select count(*) from report where writer=#{value} and (state = 1 or state=2 )
	</select>
	<!-- 개설한 강의 수 -->
	<select id="CountOpenClassById" resultType="int">
		select count(*) from class where creater_id=#{value}
	</select>
	<update id="memberUpdate">
		<if test = "modiType=='name'">
			update member set name = #{modiContents} where email = #{email}
		</if>
		<if test = "modiType=='phone'">
			update member set phone = #{modiContents} where email = #{email}
		</if>
		<if test = "modiType=='nickname'">
			update member set nickname = #{modiContents} where email = #{email}
		</if>
		<if test = "modiType=='type'">
			update member set type = #{modiContents} where email = #{email}
		</if>
		
	</update>
	<select id="selectNicknameByEmail" resultType="String">
		select nickname from member where email=#{value}
	</select>
	<select id="selectMemberByEmail" resultType="kh.spring.DTO.MemberDTO">
		select * from member where email=#{value}
	</select>



<!-- 클래스Mapper에 들어갈 거  -->
	<!-- 찜한 클래스 수 -->
	<select id="goodClassCount" resultType="int"> 
		select count(*) from (select c.*, row_number() over (order by g.like_seq desc) rn from class c left join good g on (c.class_seq = g.parent_seq)
		where g.email = #{email})
	</select>
	<!-- 오픈한 클래스 수 -->
	<select id="openClassCount" resultType="int"> 
		select count(*) from class where creater_id=#{value}
	</select>
	<!-- 오픈한 클래스 정보 -->
	<select id="openCListByPage" resultType="map">
	select * from(select row_number() over(order by class.class_seq) num ,class.*,r.*,m.nickname,cr.review_count from class left join 
	(select parent_seq,count(*) std_count from class_regstds group by parent_seq ) r 
	on (class.class_seq=r.parent_seq) left join member m on (m.email=class.CREATER_ID) left join
	(select count(*) review_count, parent_seq from class_review where state!=2  group by parent_seq) cr on cr.parent_seq=class_seq where class.creater_id=#{email})
	where num between #{start} and #{end}     
	</select>	
	<!-- 작성한 리뷰 전체수 -->
	<select id="reviewCountByEmail" resultType="int">
		select count(*) from class_review where std_id=#{value}
	</select>
	<select id="reviewListByPage" resultType="map">
		select * from (select row_number() over(order by r.review_seq) num,r.write_date,r.state rstate,c.state cstate, r.contents rcontents,c.*,r.stars rstar 
		,m.nickname creaternick from class c left join class_review r on c.class_seq = r.parent_seq left join member m on c.creater_id = m.email
        where r.std_id=#{email})where num between #{start} and #{end}
	</select>
	<!-- 클래스 디테일에 사용할 자료(클래스DTO와 수강인원, 리뷰수, 누적금액 -->
	<select id="classDetail" resultType="map">
		select c.*,m.nickname,NVL(s.std_count,0) nstd_count,NVL(r.review_count,0) nreview_count,NVL(s.earn,0)nearn,NVL(r.avgstar,0) navgstar
		from class c left join (select count(case when state='결제완료' then 1 end) std_count,parent_seq,sum(price) earn
		 from class_RegStds group by parent_seq) s on c.class_seq=s.parent_seq left join 
		 (select count(case when state!=2 then 1 end) review_count,parent_seq,avg(stars) avgstar 
		 from class_review where state!=2 group by parent_seq) r on r.parent_seq=c.class_seq
         left join member m on c.creater_id = m.email where c.class_seq=#{value}

	</select>
	<select id="reviewBySeq" resultType="map" >
		select * from class_review r left join member m on r.std_id=m.email where r.parent_seq= #{value} 
		and r.state!=2
	</select>
	<select id="regBySeq" resultType="map">
		select * from class_RegStds r left join member m on r.std_id=m.email where r.parent_seq=#{value} 
	</select>
	<!-- 구매 클래스 정보 -->
	<select id="classInfoByEmailNSeq" resultType="map">
		select r.*,c.title,c.class_date,c.price cprice,m.nickname,c.state cstate,r.std_id stdemail   
		from class_RegStds r left join class c on r.parent_seq = c.class_seq
		inner join member m on c.creater_id=m.email where regstds_seq=#{value}
	</select>
	
	
<!-- 커뮤니티에 들어갈 거 -->
	<!-- 이메일 별 작성 글 수 -->
	<select id="boardCount" resultType="int">
	select count(*) from community where writer=#{value}
	</select>
	<!-- 커뮤니티 정보 뽑기 -->
	<select	 id="boardByEmail" resultType="map">
		select * from (select row_number() over(order by c.write_date desc) num ,c.*, nvl(reply_count,0) nreply_count,
		to_char(  c.write_date, 'yyyy-mm-dd') board_date  from community c left join
		(select count(*) reply_count,parent_seq from reply where state!=2  group by parent_seq) r
		on c.board_seq=r.parent_seq  where c.writer=#{email}) where num between #{start} and #{end}
	</select>
	<!-- 게시글 날짜 뽑기 -->
	<select id="selectWrite_date" resultType="String">
		select write_date from community where board_seq = #{value}
	</select>
	<select id="countReplyByEmail" resultType="int">
		select count(*) from reply where writer=#{email}
	</select>
	<select id="ReplyByEmail" resultType="map">
		select * from (select row_number() over(order by r.reply_seq desc) num, 
		r.board_seq seq,c.title,r.contents rcontents, to_char(  r.write_date, 'yyyy-mm-dd') rdate, 
		r.like_count rlike,m.name ,r.state rstate, c.state cstate from reply r left join community c on r.board_seq=c.board_seq
		inner join member m on m.email=r.writer where r.writer=#{email}) where num between #{start} and #{end}
	</select>	
	
<!-- 대시보드에 들어갈 거 -->

<!-- 일별 로그인 수 -->
<select id="loginForWeek" resultType="map">
select newdt,nvl(count,0) logcount from 
(select to_char(dt,'YY/MM/DD') newdt 
from (SELECT TO_DATE(sysdate,'YYYY-MM-DD') + LEVEL - 7 AS dt
FROM dual 
connect by level
 <![CDATA[<=]]>  7)) datatable 
left join
(select count(*) count,dates from 
(select distinct TO_char(login_date,'YY/MM/DD') dates ,EMAIL from login_log)
group by dates) log
on log.dates = datatable.newdt order by newdt desc
</select>

<!-- 일별 클래스 오픈 수 -->
<select id="openForWeek" resultType="map">

select dt,nvl(count,0) opencount  from 
(SELECT TO_DATE(sysdate,'yy-MM-DD') + LEVEL - 7 AS dt
FROM dual 
CONNECT BY LEVEL<![CDATA[<=]]>7) datatable
left join
(select count(*) count, rdate from
(select class.*,to_char(class.reg_date,'yy/mm/dd') rdate from class)
group by rdate) class_open 
on datatable.dt = class_open.rdate
order by dt desc

</select>
<select id="regForWeek" resultType="map">
with t as
(
    select '요리' as category from dual
    UNION ALL
    select '음악' as category from dual
    UNION ALL
    select '공예' as category from dual
    UNION ALL
    select '사진' as category from dual
    UNION ALL
    select '언어' as category from dual
    UNION ALL
    select '운동' as category from dual
    UNION ALL
    select '코딩' as category from dual
    UNION ALL
    select '기타' as category from dual
)
select t.category,nvl(ct.count,0) regcount from t left join
(select count(*) count,category1 from 
(select * from class_regstds where reg_date 
	<![CDATA[>=]]> to_char(SYSDATE-6,'YY/MM/DD') and state='결제완료') r 

left join 

(select class_seq,category1 from class) c

on c.class_seq=r.parent_Seq group by category1)

ct on t.category=ct.category1

order by category

</select>
<select id="writeForWeek" resultType="map">

select newdt,nvl(count,0) wcount from 
(select to_char(dt,'YY/MM/DD') newdt 
from (SELECT TO_DATE(sysdate,'YYYY-MM-DD') + LEVEL - 7 AS dt
FROM dual 
CONNECT BY LEVEL<![CDATA[<=]]>7)) datatable 

left join  

(select count(*) count,to_char(write_date,'yy/mm/dd') wdate 
from community group by to_char(write_date,'yy/mm/dd')) comu

on datatable.newdt=comu.wdate
order by newdt desc

</select>
<select id="writeByCate"  resultType="map">
with t as
(
    select 'q' as category from dual
    UNION ALL
    select 's' as category from dual
    UNION ALL
    select 'h' as category from dual
    UNION ALL
    select 'd' as category from dual
)
select nvl(r.cnt, 0) countbycategory , t.category from t left join 
(select count(*) as cnt,category from (select write_date,SUBSTRB(board_seq,1,1) category
from community where write_date<![CDATA[>=]]>to_char(SYSDATE-6,'YY/MM/DD')) 
GROUP by category) r on t.category=r.category order by 
decode(category,'q',1),
decode(category,'h',1),
decode(category,'s',1)
</select>
</mapper>