<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Mypage">

	<!-- id로 회원정보 불러오기 -->
	<select id="select" resultType="kh.spring.DTO.MemberDTO">
		select * from member where email = #{value}
	</select>

	<!-- 연락처, 닉네임만 수정 -->
	<insert id="updateInfo">
		update member set phone = #{phone}, nickname = #{nickname} where email = #{email}
	</insert>

	<!-- 프로필 이미지 수정 -->
	<insert id="updateImage">
		update member set profile_img = #{profile_img} where email = #{email}
	</insert>

	<!-- 프로필 이미지 삭제 -->
	<insert id="deleteImage">
		update member set profile_img = null where email = #{email}
	</insert>
	
	<!-- 회원탈퇴 -->
	<delete id="delete">
		delete from member where email = #{value}
	</delete>
	
	<!-- 내가 구매한 클래스 -->
	<select id="buyClass" resultType="map">
		select * from (select c.class_seq, c.class_date, c.category1, c.category2, c.title, c.creater_info, c.price, 
		TO_CHAR(r.reg_date , 'YYYY-MM-DD HH24:mi:ss') "buy_date", c.state, row_number() over (order by r.reg_date desc) rn from class c
		inner join class_RegStds r on (c.class_seq = r.parent_seq) where std_id = #{email})
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>

	<!-- 내가 구매한 클래스의 사진 -->
	<select id="buyPic" resultType="kh.spring.DTO.ImgDTO">
		select * from (select i.*, row_number() over (order by r.reg_date desc) rn from img i
		left join class_RegStds r on (i.parent_seq = r.parent_seq) where std_id = #{email} and substr(i.img_seq,1,3) = 'ma1')
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 찜한 클래스 -->
	<select id="likeClass" resultType="kh.spring.DTO.ClassDTO">
		select * from (select c.*, row_number() over (order by g.like_seq desc) rn from class c left join good g on (c.class_seq = g.parent_seq)
		where g.email = #{email})
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 찜한 클래스의 사진 -->
	<select id="likePic" resultType="kh.spring.DTO.ImgDTO">
		select * from (select i.*, row_number() over (order by g.like_seq desc) rn from img i left join good g on (i.parent_seq = g.parent_seq)
		where g.email = #{email} and substr(i.img_seq,1,3) = 'ma1') 
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>

	<!-- 내가 등록한 클래스 -->
	<select id="regClass" resultType="map">
		select * from (select c.class_seq, c.title, TO_CHAR(c.reg_date, 'YYYY-MM-DD') "reg_date", c.class_date, c.price, c.category1, c.category2, c.state, count(r.parent_seq) "all", 
		nvl(avg(r.stars),0) "avgstar", row_number() over (order by c.reg_date desc) rn from class c
		left join class_review r on (c.class_seq = r.parent_seq) where c.creater_id = #{email}
		group by c.class_seq, c.title, c.reg_date, c.class_date, c.price, c.category1, c.category2, c.state)
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 등록한 클래스의 사진 -->
	<select id="regPic" resultType="kh.spring.DTO.ImgDTO">
		select * from (select i.*, row_number() over (order by c.reg_date desc) rn from img i left join class c on (i.parent_seq = c.class_seq)
		where c.creater_id = #{email} and substr(i.img_seq,1,3) = 'ma1') 
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 등록한 클래스의 수강신청인원-->
	<select id="getStdCount" resultType="map">
		select * from (select c.class_seq, c.title, count(r.regstds_seq) "stdcount", row_number() over (order by c.class_seq desc) rn from class c
		left join class_regstds r on (c.class_seq = r.parent_seq) where c.creater_id = #{email} group by c.class_seq, c.title)
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>

	<!-- 내가 작성한 리뷰 -->
	<select id="classReview" resultType="map">
		select * from (select r.stars, r.contents, TO_CHAR(r.write_date, 'YYYY-MM-DD HH24:mi:ss') "write_date", r.like_count, r.state, r.parent_seq, c.category1, c.category2, c.title, c.creater_info, c.state "class_state", row_number() over (order by r.write_date desc) rn from class_review r
		inner join class c on (r.parent_seq = c.class_seq) where r.std_id = #{email})
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>

	<!-- 내가 리뷰를 작성한 클래스의 사진 -->
	<select id="reviewPic" resultType="kh.spring.DTO.ImgDTO">
		select * from (select i.*, row_number() over (order by r.write_date desc) rn from img i left join class_review r on (i.parent_seq = r.parent_seq)
		where r.std_id = #{email} and substr(i.img_seq,1,3) = 'ma1') 
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 작성한 커뮤니티글 -->
	<select id="viewPost" resultType="map">
		select * from (select c.board_seq, c.title, c.contents, TO_CHAR(c.write_date, 'YYYY-MM-DD HH24:mi:ss') "write_date", c.view_count, c.like_count, nvl(c.hash_tag,' ') "HASH_TAG", c.state, count(r.reply_seq) "all", 
		row_number() over (order by c.write_date desc) rn from community c
		left join reply r on (c.board_seq = r.board_seq) where c.writer = #{email}
		group by c.board_seq, c.title, c.contents, c.write_date, c.view_count, c.like_count, c.hash_tag, c.state)
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 내가 작성한 커뮤니티글의 사진 가져오기..-->
  	<select id="getPost" resultType="kh.spring.DTO.CommunityDTO">
  		select * from (select * from community where writer = #{email} order by write_date desc)
  		<if test="start != null and !start.equals('')">
			where rownum between #{start} and #{end}
		</if>
  	</select>	
  	
  	<select id="postPic" resultType="kh.spring.DTO.ImgDTO">
  		select * from (select row_number() over(partition by img.parent_seq order by img.img_seq) as rn, img.* from img) where parent_seq = #{value} and rn = 1
  	</select>	

	<!-- 내가 작성한 댓글 -->
	<select id="viewReply" resultType="map">
		select * from (select r.board_seq, r.contents, r.like_count, TO_CHAR(c.write_date, 'YYYY-MM-DD HH24:mi:ss') "write_date", r.state, c.title, c.state "board_state", row_number() over (order by r.write_date desc) rn from reply r
		inner join community c on (r.board_seq = c.board_seq) where r.writer = #{email})
		<if test="start != null and !start.equals('')">
			where rn between #{start} and #{end}
		</if>
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - class_seq로 클래스 정보 보기 -->
	<select id="getClassInfo" resultType="kh.spring.DTO.ClassDTO">
		select * from class where class_seq = #{value}
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 구매한 클래스 seq -->	
	<select id="getBuyClass" resultType="String">
		select parent_seq from class_RegStds where std_id = #{value} order by reg_date desc 
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 구매한 클래스의 사진 -->	
	<select id="mainPicList" resultType="kh.spring.DTO.ImgDTO">
		select * from img where parent_seq = #{value} and substr(img_seq,1,3) = 'ma1'
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 작성한 커뮤니티 글 -->
	<select id="getPostList" resultType="kh.spring.DTO.CommunityDTO">
		select * from community where writer = #{value} order by write_date desc 
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 작성한 커뮤니티 글의 댓글수 -->
	<select id="getReplyCount" resultType="Integer">
		select count(*) from reply where board_seq = #{value} 
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 작성한 댓글 -->
	<select id="getReplyList" resultType="kh.spring.DTO.ReplyDTO">
		select * from reply where writer = #{value} order by write_date desc
	</select>
	
	<!-- 마이페이지 메인 화면 사용 - 내가 작성한 댓글의 본문 -->
	<select id="replyPostList" resultType="kh.spring.DTO.CommunityDTO">
		select * from community where board_seq = #{value}
	</select>
	
	<!-- 내가 등록한 클래스 상세 화면 사용 - parent_seq로 해당 클래스 등록현황 불러오기 -->
	<select id="getRegiDetail" resultType="kh.spring.DTO.RegStdsDTO">
		select * from class_regstds where parent_seq = #{value}
		order by regstds_seq desc
	</select>
	
	<!-- 내가 등록한 클래스 상세 화면 사용 - 리뷰수, 별점 평균 가져오기 -->
	<select id="reviewdetail" resultType="map">
		select count (*) "all", nvl(avg(stars),0) "avgstar" from class_review where parent_seq = #{value}
	</select>

	<!--  내가 등록한 클래스 상세 화면 사용 - 수강 신청 인원 가져오기 -->
	<select id="myClassStds" resultType="Integer">
		select count (*) from class_regstds where parent_seq = #{value}
	</select>

	<!-- 내가 등록한 클래스 상세 화면 사용 - 내가 등록한 클래스의 리뷰 모두 보기 -->
	<select id="allClassReview" resultType="kh.spring.DTO.ReviewDTO">
		select * from class_review where parent_seq = #{value} order by review_seq desc
	</select>

</mapper>